[
["index.html", "A Gentle Introduction to Mapping in R with ggplot2 Introduction 0.1 What You Will Learn 0.2 What You Will Use 0.3 Colophon", " A Gentle Introduction to Mapping in R with ggplot2 Adam H. Sparks 2019-11-04 Introduction Creating maps with R often feels like a hard task, but it does not have to be. With just a few packages it is possible to create high-quality maps for publication using ggplot2. 0.1 What You Will Learn Geographic information systems (GIS) is a field large enough to have whole degree programs dedicated to it and indeed, entire companies (e.g., ESRI). This short lesson will help you understand enough basic information to find and import data into R to create maps of your own research data. It will not teach you all aspects of GIS or how to perform spatial analysis. You will learn about the types of data that are used in making maps and how they differ and how you use them differently to create a map that clearly conveys the information you wish to deliver. 0.2 What You Will Use In this workshop we have already introduced the tidyverse, which ggplot2 is a part of. We will use this to create our maps along with other packages for handling spatial data and importing data. 0.3 Colophon An online version of this book is available at http://adamhsparks.github.io… The source of the book is available at https://github.com/adamhsparks/…. The book is powered by https://bookdown.org which makes it easy to turn R markdown files into HTML, PDF, and EPUB. This book was built with: sessioninfo::session_info() ## ─ Session info ────────────────────────────────────────────────────────── ## setting value ## version R version 3.6.1 (2019-07-05) ## os Manjaro Linux ## system x86_64, linux-gnu ## ui RStudio ## language (EN) ## collate en_AU.UTF-8 ## ctype en_AU.UTF-8 ## tz America/Sao_Paulo ## date 2019-11-04 ## ## ─ Packages ────────────────────────────────────────────────────────────── ## package * version date lib ## assertthat 0.2.1 2019-03-21 [1] ## backports 1.1.5 2019-10-02 [1] ## bookdown 0.14 2019-10-01 [1] ## broom 0.5.2 2019-04-07 [1] ## cellranger 1.1.0 2016-07-27 [1] ## class 7.3-15 2019-01-01 [2] ## classInt 0.4-2 2019-10-17 [1] ## cli 1.1.0 2019-03-19 [1] ## codetools 0.2-16 2018-12-24 [2] ## colorspace 1.4-1 2019-03-18 [1] ## crayon 1.3.4 2017-09-16 [1] ## DBI 1.0.0 2018-05-02 [1] ## digest 0.6.22 2019-10-21 [1] ## dplyr * 0.8.3 2019-07-04 [1] ## e1071 1.7-2 2019-06-05 [1] ## ellipsis 0.3.0 2019-09-20 [1] ## evaluate 0.14 2019-05-28 [1] ## fansi 0.4.0 2018-10-05 [1] ## forcats * 0.4.0 2019-02-17 [1] ## generics 0.0.2 2018-11-29 [1] ## ggplot2 * 3.2.1 2019-08-10 [1] ## glue 1.3.1 2019-03-12 [1] ## gtable 0.3.0 2019-03-25 [1] ## haven 2.1.1 2019-07-04 [1] ## hms 0.5.2 2019-10-30 [1] ## htmltools 0.4.0 2019-10-04 [1] ## httr 1.4.1 2019-08-05 [1] ## jsonlite 1.6 2018-12-07 [1] ## KernSmooth 2.23-15 2015-06-29 [2] ## knitr 1.25 2019-09-18 [1] ## later 1.0.0 2019-10-04 [1] ## lattice 0.20-38 2018-11-04 [2] ## lazyeval 0.2.2 2019-03-15 [1] ## lifecycle 0.1.0 2019-08-01 [1] ## lubridate * 1.7.4 2018-04-11 [1] ## magrittr 1.5 2014-11-22 [1] ## modelr 0.1.5 2019-08-08 [1] ## munsell 0.5.0 2018-06-12 [1] ## nlme 3.1-140 2019-05-12 [2] ## pillar 1.4.2 2019-06-29 [1] ## pkgconfig 2.0.3 2019-09-22 [1] ## purrr * 0.3.3 2019-10-18 [1] ## R6 2.4.0 2019-02-14 [1] ## raster * 3.0-7 2019-09-24 [1] ## Rcpp 1.0.2 2019-07-25 [1] ## readr * 1.3.1 2018-12-21 [1] ## readxl 1.3.1 2019-03-13 [1] ## rgeos 0.5-2 2019-10-03 [1] ## rlang 0.4.1 2019-10-24 [1] ## rmarkdown 1.16 2019-10-01 [1] ## rnaturalearth * 0.1.0 2017-03-21 [1] ## rnaturalearthhires 0.2.0 2019-11-01 [1] ## rsthemes 0.0.3 2019-11-03 [1] ## rstudioapi 0.10 2019-03-19 [1] ## rvest 0.3.4 2019-05-15 [1] ## scales 1.0.0 2018-08-09 [1] ## sessioninfo 1.1.1 2018-11-05 [1] ## sf 0.8-0 2019-09-17 [1] ## sp * 1.3-1 2018-06-05 [1] ## stringi 1.4.3 2019-03-12 [1] ## stringr * 1.4.0 2019-02-10 [1] ## tibble * 2.1.3 2019-06-06 [1] ## tidyr * 1.0.0 2019-09-11 [1] ## tidyselect 0.2.5 2018-10-11 [1] ## tidyverse * 1.2.1 2017-11-14 [1] ## tinytex 0.17 2019-10-30 [1] ## units 0.6-5 2019-10-08 [1] ## utf8 1.1.4 2018-05-24 [1] ## vctrs 0.2.0 2019-07-05 [1] ## viridisLite 0.3.0 2018-02-01 [1] ## withr 2.1.2 2018-03-15 [1] ## xfun 0.10 2019-10-01 [1] ## xml2 1.2.2 2019-08-09 [1] ## yaml 2.2.0 2018-07-25 [1] ## zeallot 0.1.0 2018-01-28 [1] ## sourcelocal ## Github (gadenbuie/rsthemes@d1a82c9) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## CRAN (R 3.6.1) ## ## [1] /home/adam/.local/lib/R ## [2] /usr/lib/R/library "],
["intro.html", "Chapter 1 Working with Spatial Data in R 1.1 Forms of Spatial Data 1.2 Spatial Packages 1.3 Exercises", " Chapter 1 Working with Spatial Data in R 1.1 Forms of Spatial Data Spatial data comes in two basic forms, raster (gridded) and vector (points, lines and polygons). Raster data are often used to represent continuous variables, e.g. temperature, rainfall or elevation. Whereas vector data are used to represent sampling locations, weather station locations (and data at that point), roads, state or national outlines or other regions that may be natural or manufactured. Understanding how these data differ is important to being able to use them in maps in R. 1.2 Spatial Packages Spatial data has its own unique properties. Packages that are commonly used with spatial data in R include. raster (Hijmans 2019), sf (Pebesma 2018), rnaturalearth (South 2017), rnaturalearthdata, ggspatial (Dunnington 2018), grid (this is a part of your base R installation) and gridExtra. The raster package is used to handle raster data files but also offers capabilities to download and import other data including country-level outlines (GADM), elevation (SRTM data) and bioclimatic variables from Worldclim. sf is used to handle vector-format files and ggplot2 now offers geom_sf() for easy plotting of sf objects. rnaturalearth and rnaturalearthdata facilitate mapping using data from http://www.naturalearthdata.com/. ggspatial is used to add map elements such as scale bars and north arrows to ggplot2 objects. grid and gridExtra are used to add what are called “neatlines”, an outline around the map to contain all the elements of the map. You may also want to visit https://rspatial.org for more packages, tutorials and information. 1.3 Exercises 1.3.1 Install Spatial Packages Install the packages necessary for working with spatial data in R. This will take a few moments to complete. install.packages(c( &quot;raster&quot;, &quot;sf&quot;, &quot;rnaturalearth&quot;, &quot;rnaturalearthdata&quot;, &quot;ggspatial&quot; )) Once the main packages are installed, the second step is to install the rnaturalearthhires package as well. Answer 1 to download and install the necessary data. Again, this will also take some time. library(rnaturalearth) install_rnaturalearthhires() Now we are ready to make some maps! References "],
["creating-country-and-state-level-maps.html", "Chapter 2 Creating Country and State Level Maps 2.1 Introduction 2.2 Exercises 2.3 Your Turn", " Chapter 2 Creating Country and State Level Maps 2.1 Introduction In this first exercise we will use rnaturalearth, simple features and ggplot2 to create a map of Brazil and states within Brazil to use as the base of the maps we will create in these exercises. 2.2 Exercises 2.2.1 Create Country Level Map of Brazil This is our base layer, Brazil, of the map from (Naturalearth.com)[https://naturalearth.com/] using the base plot() to display these data. Using ne_states() will return an sf object with state level information. There is also a ne_countries() to download country level outlines only as well. library(rnaturalearth) br_sf &lt;- ne_states(geounit = &quot;brazil&quot;, returnclass = &quot;sf&quot;) plot(br_sf) ## Warning: plotting the first 9 out of 83 attributes; use max.plot = 83 to ## plot all 2.2.1.1 Plot using ggplot2 Using ggplot2, we have more control over how the data are displayed. First plot the whole country using ggplot(). library(ggplot2) br &lt;- ggplot(br_sf) + geom_sf(fill = &quot;white&quot;) br 2.2.1.2 Add Labels to the States The naturalearth data have several columns to work with. One of them is the abbreviation for the states. Using geom_text(), we can add this information to the map. br &lt;- br + geom_text( data = br_sf, aes(x = longitude, y = latitude, label = abbrev), size = 2.5, hjust = 1 ) br 2.2.1.3 Final Touches Properly label the x and y-axis and set the theme. The ggplot2 theme, theme_bw() is nice to use with maps, so we will apply that here as well. br &lt;- br + xlab(&quot;Longitude&quot;) + ylab(&quot;Latitude&quot;) + theme_bw() br 2.2.2 Create Maps of Individual States To create a map of only Minas Gerais, subset the sf object, br such that it contains only the data for Minas Gerais. 2.2.2.1 Inspect Column Names in br_sf Object To find out what the column names are, we can use, colnames(). names(br_sf) ## [1] &quot;featurecla&quot; &quot;scalerank&quot; &quot;adm1_code&quot; &quot;diss_me&quot; &quot;iso_3166_2&quot; ## [6] &quot;wikipedia&quot; &quot;iso_a2&quot; &quot;adm0_sr&quot; &quot;name&quot; &quot;name_alt&quot; ## [11] &quot;name_local&quot; &quot;type&quot; &quot;type_en&quot; &quot;code_local&quot; &quot;code_hasc&quot; ## [16] &quot;note&quot; &quot;hasc_maybe&quot; &quot;region&quot; &quot;region_cod&quot; &quot;provnum_ne&quot; ## [21] &quot;gadm_level&quot; &quot;check_me&quot; &quot;datarank&quot; &quot;abbrev&quot; &quot;postal&quot; ## [26] &quot;area_sqkm&quot; &quot;sameascity&quot; &quot;labelrank&quot; &quot;name_len&quot; &quot;mapcolor9&quot; ## [31] &quot;mapcolor13&quot; &quot;fips&quot; &quot;fips_alt&quot; &quot;woe_id&quot; &quot;woe_label&quot; ## [36] &quot;woe_name&quot; &quot;latitude&quot; &quot;longitude&quot; &quot;sov_a3&quot; &quot;adm0_a3&quot; ## [41] &quot;adm0_label&quot; &quot;admin&quot; &quot;geonunit&quot; &quot;gu_a3&quot; &quot;gn_id&quot; ## [46] &quot;gn_name&quot; &quot;gns_id&quot; &quot;gns_name&quot; &quot;gn_level&quot; &quot;gn_region&quot; ## [51] &quot;gn_a1_code&quot; &quot;region_sub&quot; &quot;sub_code&quot; &quot;gns_level&quot; &quot;gns_lang&quot; ## [56] &quot;gns_adm1&quot; &quot;gns_region&quot; &quot;min_label&quot; &quot;max_label&quot; &quot;min_zoom&quot; ## [61] &quot;wikidataid&quot; &quot;name_ar&quot; &quot;name_bn&quot; &quot;name_de&quot; &quot;name_en&quot; ## [66] &quot;name_es&quot; &quot;name_fr&quot; &quot;name_el&quot; &quot;name_hi&quot; &quot;name_hu&quot; ## [71] &quot;name_id&quot; &quot;name_it&quot; &quot;name_ja&quot; &quot;name_ko&quot; &quot;name_nl&quot; ## [76] &quot;name_pl&quot; &quot;name_pt&quot; &quot;name_ru&quot; &quot;name_sv&quot; &quot;name_tr&quot; ## [81] &quot;name_vi&quot; &quot;name_zh&quot; &quot;ne_id&quot; &quot;geometry&quot; We see that a column named “name_pt” exists, with the Portuguese name spelling for each state in this data set. We can use this to filter() the data so that it only represents Minas Gerais and we can use that to make a map. For more on subsetting sf objects, see: https://cran.rstudio.com/web/packages/sf/vignettes/sf4.html 2.2.2.2 Filter Minas Gerais library(dplyr) mg &lt;- filter(br_sf, name_pt == &quot;Minas Gerais&quot;) mg ## Simple feature collection with 1 feature and 83 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -51.0276 ymin: -22.89292 xmax: -39.86074 ymax: -14.23892 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs ## featurecla scalerank adm1_code diss_me iso_3166_2 wikipedia ## 1 Admin-1 scale rank 2 BRA-601 601 BR-MG &lt;NA&gt; ## iso_a2 adm0_sr name name_alt name_local type type_en ## 1 BR 1 Minas Gerais Minas|Minas Geraes &lt;NA&gt; Estado State ## code_local code_hasc note hasc_maybe region region_cod provnum_ne ## 1 &lt;NA&gt; BR.MG &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 22 ## gadm_level check_me datarank abbrev postal area_sqkm sameascity ## 1 1 20 1 M.G.S. MG 0 NA ## labelrank name_len mapcolor9 mapcolor13 fips fips_alt woe_id ## 1 2 12 5 7 BR15 &lt;NA&gt; 2344856 ## woe_label woe_name latitude longitude sov_a3 adm0_a3 ## 1 Minas Gerais, BR, Brazil Minas Gerais -18.5895 -44.4808 BRA BRA ## adm0_label admin geonunit gu_a3 gn_id gn_name gns_id ## 1 2 Brazil Brazil BRA 3457153 Estado de Minas Gerais -655151 ## gns_name gn_level gn_region gn_a1_code region_sub ## 1 Minas Gerais, Estado de 1 &lt;NA&gt; BR.15 &lt;NA&gt; ## sub_code gns_level gns_lang gns_adm1 gns_region min_label max_label ## 1 &lt;NA&gt; 1 por BR15 &lt;NA&gt; 3.7 8.5 ## min_zoom wikidataid name_ar name_bn name_de name_en ## 1 3 Q39109 &lt;NA&gt; &lt;NA&gt; Minas Gerais Minas Gerais ## name_es name_fr name_el name_hi name_hu name_id ## 1 Minas Gerais Minas Gerais &lt;NA&gt; &lt;NA&gt; Minas Gerais Minas Gerais ## name_it name_ja name_ko name_nl name_pl name_pt ## 1 Minas Gerais &lt;NA&gt; &lt;NA&gt; Minas Gerais Minas Gerais Minas Gerais ## name_ru name_sv name_tr name_vi name_zh ne_id ## 1 &lt;NA&gt; Minas Gerais Minas Gerais Minas Gerais &lt;NA&gt; 1159307907 ## geometry ## 1 MULTIPOLYGON (((-47.30248 -... 2.2.2.3 Plot Minas Gerais ggplot(data = mg) + geom_sf() + xlab(&quot;Longitude&quot;) + ylab(&quot;Latitude&quot;) + theme_bw() 2.2.3 Highlighting States Within the Country Using the br_sf and mg objects that we have created, it is possible to create a map that highlights one state and labels it using the abbreviation, in this case Minas Gerais. ggplot(data = br_sf) + geom_sf(fill = &quot;white&quot;) + geom_sf( data = mg, fill = &quot;red&quot;) + geom_text( data = mg, aes(x = longitude, y = latitude, label = abbrev), size = 2.5, hjust = 1) + xlab(&quot;Longitude&quot;) + ylab(&quot;Latitude&quot;) + theme_bw() 2.3 Your Turn Using the examples above, download and create a map of Australia. Then highlight Queensland. "],
["adding-points.html", "Chapter 3 Adding Points 3.1 Introduction 3.2 Exercises 3.3 Your Turn", " Chapter 3 Adding Points 3.1 Introduction In many cases we may have a data set of interest that has georeferenced data (lat, lon values). Using the soybean rust observation data, add the points to the map of Brazil. 3.2 Exercises 3.2.1 Import Soybean Rust Observations We will load the tidyverse package for these next steps. library(tidyverse) sbr &lt;- read_csv(&quot;SBR-BR.csv&quot;) glimpse(sbr) ## Observations: 520 ## Variables: 7 ## $ season &lt;chr&gt; &quot;2014/2015&quot;, &quot;2014/2015&quot;, &quot;2014/2015&quot;, &quot;2014/2015&quot;, … ## $ location &lt;chr&gt; &quot;Alto Piquiri&quot;, &quot;Alvorada do Sul&quot;, &quot;Arapoti&quot;, &quot;Arroi… ## $ lat &lt;dbl&gt; -24.028, -22.780, -24.158, -32.238, -24.420, -31.331… ## $ lon &lt;dbl&gt; -53.441, -51.231, -49.827, -53.087, -53.521, -54.107… ## $ state &lt;chr&gt; &quot;PR&quot;, &quot;PR&quot;, &quot;PR&quot;, &quot;RS&quot;, &quot;PR&quot;, &quot;RS&quot;, &quot;PR&quot;, &quot;PR&quot;, &quot;RS&quot;… ## $ date_report &lt;date&gt; 2015-01-16, 2015-02-04, 2014-12-12, 2015-02-25, 201… ## $ month &lt;chr&gt; &quot;Jan&quot;, &quot;Feb&quot;, &quot;Dec&quot;, &quot;Feb&quot;, &quot;Jan&quot;, &quot;Feb&quot;, &quot;Dec&quot;, &quot;Ja… 3.2.2 Add Soybean Rust Observations to Our ggplot2 Object Using geom_point() we can add points from the CSV file of observation data to the map of Brazil that we have already created. br + geom_point(data = sbr, aes(x = lon, y = lat)) That is not too clear. Perhaps it would be better to just plot the two states, rather than the whole country. Filter the br_sf object to create a new object of only these two states. rgs_pa &lt;- filter(br_sf, name_pt == &quot;Rio Grande do Sul&quot; | name_pt == &quot;Paraná&quot;) rgs_pa ## Simple feature collection with 2 features and 83 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -57.6117 ymin: -33.74228 xmax: -48.03249 ymax: -22.52173 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs ## featurecla scalerank adm1_code diss_me iso_3166_2 wikipedia ## 1 Admin-1 scale rank 2 BRA-612 612 BR-RS &lt;NA&gt; ## 2 Admin-1 scale rank 2 BRA-613 613 BR-PR &lt;NA&gt; ## iso_a2 adm0_sr name name_alt name_local type type_en ## 1 BR 1 Rio Grande do Sul &lt;NA&gt; &lt;NA&gt; Estado State ## 2 BR 1 Paraná &lt;NA&gt; &lt;NA&gt; Estado State ## code_local code_hasc note hasc_maybe region region_cod provnum_ne ## 1 &lt;NA&gt; BR.RS &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 12 ## 2 &lt;NA&gt; BR.PR &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 13 ## gadm_level check_me datarank abbrev postal area_sqkm sameascity ## 1 1 20 1 Rio RS 0 NA ## 2 1 20 1 Paraná PR 0 NA ## labelrank name_len mapcolor9 mapcolor13 fips fips_alt woe_id ## 1 2 17 5 7 BR23 &lt;NA&gt; 2344864 ## 2 2 6 5 7 BR18 &lt;NA&gt; 2344859 ## woe_label woe_name latitude longitude ## 1 Rio Grande do Sul, BR, Brazil Rio Grande do Sul -29.7277 -53.6560 ## 2 Parana, BR, Brazil Paraná -24.6618 -51.3228 ## sov_a3 adm0_a3 adm0_label admin geonunit gu_a3 gn_id ## 1 BRA BRA 2 Brazil Brazil BRA 3451133 ## 2 BRA BRA 2 Brazil Brazil BRA 3455077 ## gn_name gns_id gns_name ## 1 Estado do Rio Grande do Sul -666687 Rio Grande do Sul, Estado do ## 2 Estado do Parana -659430 Parana, Estado do ## gn_level gn_region gn_a1_code region_sub sub_code gns_level gns_lang ## 1 1 &lt;NA&gt; BR.23 &lt;NA&gt; &lt;NA&gt; 1 kor ## 2 1 &lt;NA&gt; BR.18 &lt;NA&gt; &lt;NA&gt; 1 por ## gns_adm1 gns_region min_label max_label min_zoom wikidataid name_ar ## 1 BR23 &lt;NA&gt; 3.7 8.5 3 Q40030 &lt;NA&gt; ## 2 BR18 &lt;NA&gt; 3.7 8.5 3 Q15499 &lt;NA&gt; ## name_bn name_de name_en name_es ## 1 &lt;NA&gt; Rio Grande do Sul Rio Grande do Sul Río Grande del Sur ## 2 &lt;NA&gt; Paraná Paraná Paraná ## name_fr name_el name_hi name_hu name_id ## 1 Rio Grande do Sul &lt;NA&gt; &lt;NA&gt; Río Grande del Sur Rio Grande do Sul ## 2 Paraná &lt;NA&gt; &lt;NA&gt; Paraná Paraná ## name_it name_ja name_ko name_nl name_pl ## 1 Rio Grande do Sul &lt;NA&gt; &lt;NA&gt; Rio Grande do Sul Rio Grande do Sul ## 2 Paraná &lt;NA&gt; &lt;NA&gt; Paraná Parana ## name_pt name_ru name_sv name_tr ## 1 Rio Grande do Sul &lt;NA&gt; Rio Grande do Sul Rio Grande do Sul ## 2 Paraná &lt;NA&gt; Paraná Paraná ## name_vi name_zh ne_id geometry ## 1 Rio Grande do Sul &lt;NA&gt; 1159307911 MULTIPOLYGON (((-56.90637 -... ## 2 Paraná &lt;NA&gt; 1159307913 MULTIPOLYGON (((-54.35843 -... Using the new object with only Rio Grande do Sul and Paraná, create a new map with the soybean rust observations. Note the use of the data call in both geom_sf() and geom_point() so that it is possible to mix different data sources in the same map. ggplot() + geom_sf(data = rgs_pa, fill = &quot;white&quot;) + geom_point(data = sbr, aes(x = lon, y = lat)) + xlab(&quot;Longitude&quot;) + ylab(&quot;Latitude&quot;) + theme_bw() To show more information about the soybean rust outbreaks, we can use colours in the points. ggplot() + geom_sf(data = rgs_pa, fill = &quot;white&quot;) + geom_point(data = sbr, aes(x = lon, y = lat, colour = month)) + scale_color_viridis_d(&quot;First\\nReport&quot;) + xlab(&quot;Longitude&quot;) + ylab(&quot;Latitude&quot;) + theme_bw() That is more useful, but we have multiple years and the months are not in order. To correct this, we will modify the sbr object and make the “month” column a factor and reorder it to follow the soybean growing season. sbr &lt;- sbr %&gt;% mutate(month = as_factor(month)) %&gt;% mutate(month = fct_relevel(month, c(&quot;Nov&quot;, &quot;Dec&quot;, &quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;))) With the new data format, now plot the data. ggplot() + geom_sf(data = rgs_pa, fill = &quot;white&quot;) + geom_point(data = sbr, aes(x = lon, y = lat, colour = month)) + scale_color_viridis_d(&quot;First\\nReport&quot;) + xlab(&quot;Longitude&quot;) + ylab(&quot;Latitude&quot;) + theme_bw() Now plotting the data again shows that the months are in the proper order but there are multiple years. We can use faceting to make the maps more clear and see patterns. library(lubridate) sbr &lt;- sbr %&gt;% mutate(year = year(date_report)) ggplot() + geom_sf(data = rgs_pa, fill = &quot;white&quot;) + geom_point(data = sbr, aes(x = lon, y = lat, colour = month)) + scale_color_viridis_d(&quot;First\\nReport&quot;) + xlab(&quot;Longitude&quot;) + ylab(&quot;Latitude&quot;) + theme_bw() + facet_wrap(. ~ year) 3.3 Your Turn Create a figure such that each state/year combination is represented in its own facet. Why might this not be idea? Create individual figures for each state faceted by year with month as the point colour. "],
["working-with-raster-data.html", "Chapter 4 Working with Raster Data 4.1 Introduction 4.2 Exercises 4.3 Your Turn", " Chapter 4 Working with Raster Data 4.1 Introduction 4.2 Exercises 4.2.1 Download Climate Data from Worldclim raster has functionality built-in to download files and import them automatically to your R session for you. We will use this functionality to get Worldclim data for minimum temperature. library(raster) tmin &lt;- getData(&quot;worldclim&quot;, var = &quot;tmin&quot;, res = 10) summary(tmin) ## tmin1 tmin2 tmin3 tmin4 tmin5 tmin6 tmin7 tmin8 ## Min. -536 -518 -464 -376 -223 -146 -144 -150 ## 1st Qu. -269 -254 -195 -100 -19 37 61 53 ## Median -72 -59 -18 32 72 98 119 109 ## 3rd Qu. 145 154 163 165 170 183 192 190 ## Max. 263 260 259 272 289 302 308 309 ## NA&#39;s 1356387 1356387 1356387 1356387 1356387 1356387 1356387 1356387 ## tmin9 tmin10 tmin11 tmin12 ## Min. -190 -300 -443 -515 ## 1st Qu. 9 -64 -164 -234 ## Median 81 38 -4 -47 ## 3rd Qu. 182 171 156 144 ## Max. 293 268 267 267 ## NA&#39;s 1356387 1356387 1356387 1356504 We can see that the tmin object is a raster stack. In other words, this stack has several layers of data, one for each month plus the annual average minimum temperature. 4.2.2 Convert Temperature Data Worldclim temperature data need to be divided by 10 to convert back to degrees Celsius. This will convert all of the layers. tmin &lt;- tmin/10 4.2.3 Create a Data Set for January We can create a new object for just the minimum temperature in January. Using the [[]] is called indexing, it tells R to take the first object in the stack. tmin1 &lt;- tmin[[1]] class(tmin1) ## [1] &quot;RasterLayer&quot; ## attr(,&quot;package&quot;) ## [1] &quot;raster&quot; 4.2.4 Create Data Frame for ggplot2 However, the data are in a format that ggplot2 still will not understand, a raster object. We need to convert it to a data frame. raster has a built-in function to do this for us. tmin1_df &lt;- as.data.frame(tmin1, xy = TRUE) class(tmin1_df) ## [1] &quot;data.frame&quot; Now we we are ready to plot the data in ggplot2. 4.2.5 Plot Global Minimum Temperatures ggplot() + geom_raster(data = tmin1_df, aes(x = x, y = y, fill = tmin1)) + scale_fill_viridis_c(&quot;Min\\nT&quot;, na.value = NA) + coord_quickmap() ## Warning: Removed 1359281 rows containing missing values (geom_raster). 4.2.6 Brazil Minimum Temperature If we wish to plot only temperatures for Brazil, we need to perform some GIS operations with the raster object, a bit different than the sf in previous examples. Work is being done to make raster files in R work as seamlessly, but for right now it is not possible yet. The first step is to crop the raster file, removing all data that is not Brazil. We will use the br_sf object to instruct raster where our data begins and ends. Using the base plot() method, quickly explore the new object, brazil that is created. 4.2.6.1 Crop Operation brazil &lt;- crop(tmin1, br_sf) plot(brazil) 4.2.6.2 Mask Operation The brazil object is not only Brazil but also bits of other countries nearby. To fix this we will now use mask() from the raster package to remove data that are outside the outline of Brazil. brazil &lt;- mask(brazil, br_sf) plot(brazil) Now that we have the data we desire, we can convert it into a data.frame suitable for use in ggplot2. brazil &lt;- as.data.frame(brazil, xy = TRUE) 4.2.7 Plot Brazil Minimum Temperature br_tmin &lt;- ggplot() + geom_raster(data = brazil, aes(x = x, y = y, fill = tmin1)) + scale_fill_viridis_c(&quot;Min\\nT (°C)&quot;, na.value = NA) + xlab(&quot;Longitude&quot;) + ylab(&quot;Latitude&quot;) + coord_quickmap() 4.2.8 Adding State Outlines We can add the state outlines on top of the minimum temperatures as a new layer. Using the br_sf object and geom_sf() will add state outlines. However, fill must be set to NA or the polygons will be filled with default grey. br_tmin &lt;- br_tmin + geom_sf(data = br_sf, fill = NA, colour = &quot;black&quot;) + coord_sf() 4.3 Your Turn Create a map of Minas Gerais’ minimum temperature for December. "],
["polishing-your-map-for-publication.html", "Chapter 5 Polishing Your Map for Publication 5.1 Introduction 5.2 Exercises 5.3 Your Turn", " Chapter 5 Polishing Your Map for Publication 5.1 Introduction In this section we will polish the map for publication. Maps traditionally have several specific elements that help them convey the information to the user. These include legends, which we’ve already added to our maps, north arrows to orient the user and scale bars and scale to show the scale of the map. Projections are used to represent the spherical surface of the Earth in a flat plane. Think of wrapping a piece of paper around a ball. It does not wrap evenly, a map is the reverse process, trying to flatten a globe or sphere. Projections help us deal with these distortions. Published maps should always be projected for the area of interest. As the area gets smaller, the projection becomes less important. The data that we downloaded from Naturalearthdata and Worldclim both are in an Equirectangular projection. In the exercises, first, we will re-project the data to SIRGAS 2000, which is what the Brazilian government normally uses for their maps. Then we will add elements to complete our map including the north arrow, scale bar and text, title, data attribution and a neatline. 5.2 Exercises 5.2.1 Re-project Data There are several types of map projection depending on the scale (e.g. global, continent, national, state). Continental and national scale projections often depend on the location on the globe to help inform the choice of projection to use. First, we check the current projections of the data. library(sf) ## Linking to GEOS 3.7.2, GDAL 3.0.1, PROJ 6.2.0 st_crs(br_sf) ## Coordinate Reference System: ## EPSG: 4326 ## proj4string: &quot;+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs&quot; To reproject the data we will provide the definition for SIRGAS 2000. The information for the proj4text comes from https://epsg.io/4674, which has information for several different map projections. br_sf &lt;- st_transform(br_sf, 4674) st_crs(br_sf) ## Coordinate Reference System: ## EPSG: 4674 ## proj4string: &quot;+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs&quot; 5.2.2 Adding North Arrows and Scale Bars Using ggspatial we will add a scale bar and north arrow to the map of Minas Gerais to the bottom right corner where there is a bit of space for them. library(&quot;ggspatial&quot;) ggplot() + geom_sf(data = br_sf) + geom_raster(data = brazil, aes(x = x, y = y, fill = tmin1)) + scale_fill_viridis_c(&quot;Min\\nT (°C)&quot;, na.value = NA) + xlab(&quot;Longitude&quot;) + ylab(&quot;Latitude&quot;) + annotation_north_arrow( location = &quot;br&quot;, which_north = &quot;true&quot;, pad_x = unit(0.25, &quot;in&quot;), pad_y = unit(0.25, &quot;in&quot;), style = north_arrow_fancy_orienteering ) + coord_sf() + theme_bw() ## Warning: Removed 37943 rows containing missing values (geom_raster). Next we will add the scale bar to the bottom right where there is a bit more space and it won’t interfere with the map. br_tmin &lt;- ggplot() + geom_sf(data = br_sf) + geom_raster(data = brazil, aes(x = x, y = y, fill = tmin1)) + scale_fill_viridis_c(&quot;Min\\nT (°C)&quot;, na.value = NA) + xlab(&quot;Longitude&quot;) + ylab(&quot;Latitude&quot;) + annotation_north_arrow( location = &quot;br&quot;, which_north = &quot;true&quot;, pad_x = unit(0.25, &quot;in&quot;), pad_y = unit(0.25, &quot;in&quot;), style = north_arrow_fancy_orienteering ) + annotation_scale(location = &quot;br&quot;, width_hint = 0.5) + coord_sf() + theme_bw() 5.2.3 Adding a Descriptive Title and Data Source Adding a title is the same as any other ggplot2 object. br_tmin + labs(title = &quot;Map of Minimum Average Temperature&quot;) ## Warning: Removed 37943 rows containing missing values (geom_raster). It is always a good idea to credit the sources of the map data, especially if it is not your own. The labs() has options for subtitles, which can be useful, but also a caption argument, which is useful for adding data attributions to your map. br_tmin &lt;- br_tmin + labs(title = &quot;Map of Minimum Average Temperature&quot;, subtitle = &quot;Month of January&quot;, caption = &quot;Data from Worlclim, used with permission&quot;) br_tmin Neatlines are traditionally part of a map but in many cases nowadays, it is not uncommon to see maps without them. If you wish to add a neatline to your map it is possible to do using the gridExtra and grid packages. library(grid) library(gridExtra) ## ## Attaching package: &#39;gridExtra&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## combine grid.arrange(br_tmin, ncol = 1) ## Warning: Removed 37943 rows containing missing values (geom_raster). ## Scale on map varies by more than 10%, scale bar may be inaccurate grid.rect( width = 0.98, height = 0.98, gp = gpar(lwd = 0.25, col = &quot;black&quot;, fill = NA) ) 5.3 Your Turn Using the examples above, create a map of a state in Brazil of your choice, add all of the map elements from above to make a complete map of just the state. Using the datavfor the map of tmin for Minas Gerais you created in the last exercise, create a map of tmin for Minas Gerais and add all the appropriate map elements to it. "],
["wrap-up.html", "Chapter 6 Wrap Up 6.1 Learning more 6.2 References", " Chapter 6 Wrap Up We have installed packages necessary to create maps in R using ggplot2 and practice examples using vector data, our own point data and raster data. We saw how to incorporate different types of data in one map and how to create maps of only the region of interest and also how to create basic publication-ready maps. 6.1 Learning more To learn more about how to make maps using ggplot2 and R, I recommend these articles. There are many others available, so have a look around and see what you can find! Introduction to Geospatial Raster and Vector Data with R Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 1: Basics Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 2: Layers Drawing beautiful maps programmatically with R, sf and ggplot2 — Part 3: Layouts Beautiful thematic maps with ggplot2 (only) Bivariate maps with ggplot2 and sf Making maps with R 6.2 References "]
]
